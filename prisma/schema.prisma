datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  userType userType?
  onboardingComplete Boolean @default(false)

  Company      Company?
  Jobseeker    Jobseeker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
enum userType{
  COMPANY
  JOBSEEKER
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  about String?
  location String
  website String
  xAccount String?
  logo String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Jobseeker {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  about String
  resume String

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
